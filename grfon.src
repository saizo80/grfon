parse = function(data)
    parser = new Parser
    return parser.parse(data)
end function

Parser = {}
Parser._content = ""
Parser._length = 0
Parser._index = 0

Parser.init = function(content)
    self._content = content
    self._length = content.len
    self._index = 0
end function

Parser.parse = function(content=null)
    if content != null then self.init content
    return self._parseContent
end function

lIgnore = [" ", char(9), char(13)]
Parser._ignore = function
    while self._index < self._length
        if lIgnore.indexOf(self._content[self._index]) == null then break
        self._index = self._index + 1
    end while
end function

Parser._parseContent = function
    self._ignore
    if self._content[self._index] == "{" then return self._parseObject
    if self._content[self._index] == "[" then return self._parseArray
    if self._content[self._index] == "t" and self._content[self._index:self._index+4] == "true" then
        self._index = self._index + 4
        return true
    end if
    if self._content[self._index] == "f" and self._content[self._index:self._index+5] == "false" then
        self._index = self._index + 5
        return false
    end if
    if self._content[self._index] == "n" and self._content[self._index:self._index+4] == "null" then
        self._index = self._index + 4
        return null
    end if
    return self._parseValue
end function

Parser._parseObject = function
    self._index = self._index + 1
    obj = {}
    while self._index < self._length
        self._ignore
        if self._content[self._index] == "}" then break
        key = self._parseKey.trim
        self._ignore
        if self._content[self._index] != ":" then break
        self._index = self._index + 1
        value = self._parseContent
        obj[key] = value
        self._ignore
        if self._content[self._index] == "}" or self._content[self._index+1] == "}" then break
        if self._content[self._index] != ";" and self._content[self._index] != char(10) then break
        self._index = self._index + 1
    end while
    self._index = self._index + 1
    if self._content[self._index] == "}" then self._index = self._index + 1
    return obj
end function

Parser._parseKey = function
    key = ""
    while self._index < self._length
        if self._content[self._index] == ":" then break
        key = key + self._content[self._index]
        self._index = self._index + 1
    end while
    return key
end function

Parser._parseValue = function
    value = ""
    while self._index < self._length
        if self._content[self._index] == ";" or self._content[self._index] == char(10) then break
        if self._content[self._index] == "}" or self._content[self._index] == "]" then
            self._index = self._index - 1
            break
        end if
        value = value + self._content[self._index]
        self._index = self._index + 1
    end while
    value = value.trim
    if value[0] == """" and value[value.len-1] == """" then
        value = value[1:value.len-1]
    else if typeof(value.to_int) != "string" then 
        value = value.val
    end if
    return value
end function

Parser._parseArray = function
    self._index = self._index + 1
    arr = []
    while self._index < self._length
        self._ignore
        if self._content[self._index] == "]" then break
        if arr.len == 0 and self._content[self._index] == char(10) then
            self._index = self._index + 1
            continue
        end if
        value = self._parseContent
        arr.push value
        self._ignore
        if self._content[self._index] == "]" or self._content[self._index+1] == "]" then break
        if self._content[self._index] != ";" and self._content[self._index] != char(10) then break
        self._index = self._index + 1
    end while
    self._index = self._index + 1
    return arr
end function
